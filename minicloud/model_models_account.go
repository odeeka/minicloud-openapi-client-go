/*
MiniCloud REST API

Simulated VM management API built with Go and Docker

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package minicloud

import (
	"encoding/json"
)

// checks if the ModelsAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsAccount{}

// ModelsAccount struct for ModelsAccount
type ModelsAccount struct {
	// Unique identifier
	Id *int32 `json:"id,omitempty"`
	// Password (stored hashed, omit in response)
	Password *string `json:"password,omitempty"`
	// Username for login
	Username *string `json:"username,omitempty"`
}

// NewModelsAccount instantiates a new ModelsAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsAccount() *ModelsAccount {
	this := ModelsAccount{}
	return &this
}

// NewModelsAccountWithDefaults instantiates a new ModelsAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsAccountWithDefaults() *ModelsAccount {
	this := ModelsAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsAccount) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsAccount) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsAccount) SetId(v int32) {
	o.Id = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ModelsAccount) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsAccount) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ModelsAccount) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ModelsAccount) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ModelsAccount) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsAccount) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ModelsAccount) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ModelsAccount) SetUsername(v string) {
	o.Username = &v
}

func (o ModelsAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableModelsAccount struct {
	value *ModelsAccount
	isSet bool
}

func (v NullableModelsAccount) Get() *ModelsAccount {
	return v.value
}

func (v *NullableModelsAccount) Set(val *ModelsAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsAccount(val *ModelsAccount) *NullableModelsAccount {
	return &NullableModelsAccount{value: val, isSet: true}
}

func (v NullableModelsAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


