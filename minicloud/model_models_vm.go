/*
MiniCloud REST API

Simulated VM management API built with Go and Docker

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package minicloud

import (
	"encoding/json"
)

// checks if the ModelsVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsVM{}

// ModelsVM struct for ModelsVM
type ModelsVM struct {
	// ContainerID is the Docker container ID simulating the VM. required: false
	ContainerId *string `json:"container_id,omitempty"`
	// CPU represents the number of virtual CPUs allocated to the VM. example: 1.5
	Cpu *float32 `json:"cpu,omitempty"`
	// Env contains environment variables passed to the container. example: {\"ENV\": \"dev\"}
	Env *map[string]string `json:"env,omitempty"`
	// ID is the unique identifier of the virtual machine. required: true
	Id *int32 `json:"id,omitempty"`
	// Image used to start the virtual machine (e.g., \"nginx\", \"ubuntu\"). required: true
	Image *string `json:"image,omitempty"`
	// Memory in megabytes allocated to the VM. example: 1024
	Memory *int32 `json:"memory,omitempty"`
	// Name of the virtual machine. required: true
	Name *string `json:"name,omitempty"`
	// Ports to expose on the container (e.g., [80, 443]). example: [80, 443]
	Ports []int32 `json:"ports,omitempty"`
}

// NewModelsVM instantiates a new ModelsVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsVM() *ModelsVM {
	this := ModelsVM{}
	return &this
}

// NewModelsVMWithDefaults instantiates a new ModelsVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsVMWithDefaults() *ModelsVM {
	this := ModelsVM{}
	return &this
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *ModelsVM) GetContainerId() string {
	if o == nil || IsNil(o.ContainerId) {
		var ret string
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerId) {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *ModelsVM) HasContainerId() bool {
	if o != nil && !IsNil(o.ContainerId) {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given string and assigns it to the ContainerId field.
func (o *ModelsVM) SetContainerId(v string) {
	o.ContainerId = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ModelsVM) GetCpu() float32 {
	if o == nil || IsNil(o.Cpu) {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetCpuOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ModelsVM) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *ModelsVM) SetCpu(v float32) {
	o.Cpu = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *ModelsVM) GetEnv() map[string]string {
	if o == nil || IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetEnvOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *ModelsVM) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the Env field.
func (o *ModelsVM) SetEnv(v map[string]string) {
	o.Env = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsVM) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsVM) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsVM) SetId(v int32) {
	o.Id = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ModelsVM) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ModelsVM) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ModelsVM) SetImage(v string) {
	o.Image = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ModelsVM) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ModelsVM) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *ModelsVM) SetMemory(v int32) {
	o.Memory = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsVM) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsVM) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsVM) SetName(v string) {
	o.Name = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *ModelsVM) GetPorts() []int32 {
	if o == nil || IsNil(o.Ports) {
		var ret []int32
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsVM) GetPortsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *ModelsVM) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []int32 and assigns it to the Ports field.
func (o *ModelsVM) SetPorts(v []int32) {
	o.Ports = v
}

func (o ModelsVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerId) {
		toSerialize["container_id"] = o.ContainerId
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	return toSerialize, nil
}

type NullableModelsVM struct {
	value *ModelsVM
	isSet bool
}

func (v NullableModelsVM) Get() *ModelsVM {
	return v.value
}

func (v *NullableModelsVM) Set(val *ModelsVM) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsVM) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsVM(val *ModelsVM) *NullableModelsVM {
	return &NullableModelsVM{value: val, isSet: true}
}

func (v NullableModelsVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


