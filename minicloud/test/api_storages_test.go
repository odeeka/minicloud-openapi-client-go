/*
MiniCloud REST API

Testing StoragesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package minicloud

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/odeeka/minicloud-openapi-client-go"
)

func Test_minicloud_StoragesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StoragesAPIService StoragesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StoragesAPI.StoragesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StoragesAPIService StoragesIdAttachVmidPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var vmid int32

		resp, httpRes, err := apiClient.StoragesAPI.StoragesIdAttachVmidPost(context.Background(), id, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StoragesAPIService StoragesIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.StoragesAPI.StoragesIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StoragesAPIService StoragesIdDetachVmidPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var vmid int32

		resp, httpRes, err := apiClient.StoragesAPI.StoragesIdDetachVmidPost(context.Background(), id, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StoragesAPIService StoragesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.StoragesAPI.StoragesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StoragesAPIService StoragesIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.StoragesAPI.StoragesIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StoragesAPIService StoragesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StoragesAPI.StoragesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
