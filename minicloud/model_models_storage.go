/*
MiniCloud REST API

Simulated VM management API built with Go and Docker

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package minicloud

import (
	"encoding/json"
)

// checks if the ModelsStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsStorage{}

// ModelsStorage A storage volume that can optionally be attached to a VM. Includes attributes like size, name, container ID and optional VM binding.
type ModelsStorage struct {
	// The ID of the container that simulates the volume
	ContainerId *string `json:"container_id,omitempty"`
	// The unique ID of the storage volume (autoincrement from DB)
	Id *int32 `json:"id,omitempty"`
	// The name of the storage volume (autogenerated if not provided)
	Name *string `json:"name,omitempty"`
	// The size of the volume in gigabytes
	SizeGb *int32 `json:"size_gb,omitempty"`
	// The ID of the attached virtual machine (nullable)
	VmId *int32 `json:"vm_id,omitempty"`
}

// NewModelsStorage instantiates a new ModelsStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsStorage() *ModelsStorage {
	this := ModelsStorage{}
	return &this
}

// NewModelsStorageWithDefaults instantiates a new ModelsStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsStorageWithDefaults() *ModelsStorage {
	this := ModelsStorage{}
	return &this
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *ModelsStorage) GetContainerId() string {
	if o == nil || IsNil(o.ContainerId) {
		var ret string
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsStorage) GetContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerId) {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *ModelsStorage) HasContainerId() bool {
	if o != nil && !IsNil(o.ContainerId) {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given string and assigns it to the ContainerId field.
func (o *ModelsStorage) SetContainerId(v string) {
	o.ContainerId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsStorage) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsStorage) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsStorage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsStorage) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsStorage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsStorage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsStorage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsStorage) SetName(v string) {
	o.Name = &v
}

// GetSizeGb returns the SizeGb field value if set, zero value otherwise.
func (o *ModelsStorage) GetSizeGb() int32 {
	if o == nil || IsNil(o.SizeGb) {
		var ret int32
		return ret
	}
	return *o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsStorage) GetSizeGbOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeGb) {
		return nil, false
	}
	return o.SizeGb, true
}

// HasSizeGb returns a boolean if a field has been set.
func (o *ModelsStorage) HasSizeGb() bool {
	if o != nil && !IsNil(o.SizeGb) {
		return true
	}

	return false
}

// SetSizeGb gets a reference to the given int32 and assigns it to the SizeGb field.
func (o *ModelsStorage) SetSizeGb(v int32) {
	o.SizeGb = &v
}

// GetVmId returns the VmId field value if set, zero value otherwise.
func (o *ModelsStorage) GetVmId() int32 {
	if o == nil || IsNil(o.VmId) {
		var ret int32
		return ret
	}
	return *o.VmId
}

// GetVmIdOk returns a tuple with the VmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsStorage) GetVmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VmId) {
		return nil, false
	}
	return o.VmId, true
}

// HasVmId returns a boolean if a field has been set.
func (o *ModelsStorage) HasVmId() bool {
	if o != nil && !IsNil(o.VmId) {
		return true
	}

	return false
}

// SetVmId gets a reference to the given int32 and assigns it to the VmId field.
func (o *ModelsStorage) SetVmId(v int32) {
	o.VmId = &v
}

func (o ModelsStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerId) {
		toSerialize["container_id"] = o.ContainerId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SizeGb) {
		toSerialize["size_gb"] = o.SizeGb
	}
	if !IsNil(o.VmId) {
		toSerialize["vm_id"] = o.VmId
	}
	return toSerialize, nil
}

type NullableModelsStorage struct {
	value *ModelsStorage
	isSet bool
}

func (v NullableModelsStorage) Get() *ModelsStorage {
	return v.value
}

func (v *NullableModelsStorage) Set(val *ModelsStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsStorage(val *ModelsStorage) *NullableModelsStorage {
	return &NullableModelsStorage{value: val, isSet: true}
}

func (v NullableModelsStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


